#cloud-config
package_update: true
packages:
  - python3
  - python3-pip
  - nginx

write_files:
  - path: /opt/attn/web/index.html
    permissions: '0644'
    content: |
      <!doctype html><html lang="en"><head><meta charset="UTF-8"/><meta name="viewport" content="width=device-width,initial-scale=1"/><title>Attendance Registration</title><link rel="stylesheet" href="/style.css"></head><body><div class="wrap"><h1>Attendance Registration</h1><p class="hint">Enter your details and click <b>Check in</b>.</p><form id="form" class="card" onsubmit="return false;"><label>Full name<input id="name" required maxlength="80" placeholder="Jane Doe"></label><label>Employee / Student ID (optional)<input id="empid" maxlength="40" placeholder="E12345"></label><button id="btn">Check in</button></form><p id="status" class="status"></p><div class="links"><a href="/admin.html">Admin Dashboard</a><span>•</span><a href="https://github.com" target="_blank" rel="noreferrer">Project Repo</a></div></div><script>
      const form=document.getElementById('form');const nameEl=document.getElementById('name');const empEl=document.getElementById('empid');const btn=document.getElementById('btn');const status=document.getElementById('status');
      async function checkin(){status.textContent='Submitting...';btn.disabled=true;try{const body={name:nameEl.value.trim(),employee_id:empEl.value.trim()||null};const r=await fetch('/api/checkin',{method:'POST',headers:{'Content-Type':'application/json'},body:JSON.stringify(body)});const data=await r.json();if(!r.ok)throw new Error(data.error||'Error');status.textContent=`✅ Checked in at ${new Date(data.timestamp).toLocaleString()} (id: ${data.id})`;form.reset();}catch(e){status.textContent='❌ '+e.message;}finally{btn.disabled=false;}}
      btn.addEventListener('click',checkin);
      </script></body></html>
  - path: /opt/attn/web/admin.html
    permissions: '0644'
    content: |
      <!doctype html><html lang="en"><head><meta charset="UTF-8"/><meta name="viewport" content="width=device-width,initial-scale=1"/><title>Admin • Attendance</title><link rel="stylesheet" href="/style.css"></head><body><div class="wrap"><h1>Admin • Attendance</h1><div class="card"><label>Admin token<input id="tok" placeholder="enter admin token (default: changeme)"></label><div class="actions"><button id="load">Load</button><button id="export">Export CSV</button></div></div><div class="table-wrap"><table id="tbl"><thead><tr><th>ID</th><th>Name</th><th>Employee ID</th><th>Time</th><th>IP</th><th>Agent</th></tr></thead><tbody></tbody></table></div><p class="hint">Token header: <code>X-Admin-Token</code></p><p><a href="/">← Back</a></p></div><script>
      const tok=document.getElementById('tok');const loadBtn=document.getElementById('load');const exportBtn=document.getElementById('export');const tbody=document.querySelector('#tbl tbody');
      function escapeHtml(s){return s.replace(/[&<>'"]/g,c=>({'&':'&amp;','<':'&lt;','>':'&gt;',"'":'&#39;','"':'&quot;'}[c]));}
      async function load(){const r=await fetch('/api/attendees?limit=1000',{headers:{'X-Admin-Token':tok.value.trim()}});const data=await r.json();tbody.innerHTML='';if(!r.ok){alert(data.error||'Error');return;}data.items.forEach(row=>{const tr=document.createElement('tr');tr.innerHTML=`<td>${row.id}</td><td>${escapeHtml(row.name)}</td><td>${row.employee_id||''}</td><td>${new Date(row.timestamp).toLocaleString()}</td><td>${row.ip||''}</td><td>${(row.user_agent||'').slice(0,48)}</td>`;tbody.appendChild(tr);});}
      async function exportCsv(){const r=await fetch('/api/export.csv',{headers:{'X-Admin-Token':tok.value.trim()}});if(!r.ok){const data=await r.json();alert(data.error||'Error');return;}const blob=await r.blob();const url=URL.createObjectURL(blob);const a=document.createElement('a');a.href=url;a.download='attendance.csv';a.click();URL.revokeObjectURL(url);}
      loadBtn.onclick=load;exportBtn.onclick=exportCsv;
      </script></body></html>
  - path: /opt/attn/web/style.css
    permissions: '0644'
    content: |
      :root{--bg:#0f172a;--fg:#e2e8f0;--panel:#111827;--muted:#a3a3a3;--line:rgba(255,255,255,.06)}
      *{box-sizing:border-box} body{font-family:system-ui,-apple-system,Segoe UI,Roboto,Ubuntu,Cantarell,Noto Sans,Helvetica,Arial,sans-serif;background:var(--bg);color:var(--fg);margin:0;display:grid;place-items:center;min-height:100vh}
      .wrap{width:min(92vw,880px);padding:24px;background:var(--panel);border-radius:16px;box-shadow:0 10px 30px rgba(0,0,0,.3)}
      h1{margin:0 0 14px 0} .hint{color:var(--muted)}
      .card{display:grid;gap:10px;padding:16px;background:#0b1220;border-radius:12px;box-shadow:inset 0 0 0 1px var(--line);margin:16px 0}
      label{display:grid;gap:6px;text-align:left} input{padding:10px 12px;border-radius:10px;border:1px solid #374151;background:#020617;color:#e5e7eb}
      button{background:#1f2937;border:0;color:#e5e7eb;padding:10px 16px;border-radius:10px;cursor:pointer} button:hover{background:#374151}
      .status{min-height:24px;margin-top:6px}
      .links{display:flex;gap:8px;align-items:center}
      .table-wrap{overflow:auto;border-radius:12px;border:1px solid #1f2937;margin-top:16px}
      table{border-collapse:collapse;width:100%} th,td{padding:10px;border-bottom:1px solid #1f2937;text-align:left} thead th{position:sticky;top:0;background:#0b1220}
      .actions{display:flex;gap:10px}

  - path: /opt/app/app.py
    permissions: '0644'
    content: |
      import os, sqlite3, datetime, csv, io
      from flask import Flask, request, jsonify, Response
      
      DB_PATH = '/opt/app/attendance.db'
      ADMIN_TOKEN = os.environ.get('ADMIN_TOKEN', 'changeme')
      
      app = Flask(__name__)
      
      def ensure_db():
          os.makedirs(os.path.dirname(DB_PATH), exist_ok=True)
          with sqlite3.connect(DB_PATH) as con:
              con.execute('''CREATE TABLE IF NOT EXISTS checkins (
                  id INTEGER PRIMARY KEY AUTOINCREMENT,
                  name TEXT NOT NULL,
                  employee_id TEXT,
                  timestamp TEXT NOT NULL,
                  ip TEXT,
                  user_agent TEXT
              )''')
      ensure_db()
      
      @app.get('/health')
      def health():
          return jsonify(status='ok')
      
      @app.post('/checkin')
      def checkin():
          data = request.get_json(force=True, silent=True) or {}
          name = (data.get('name') or '').strip()
          emp  = (data.get('employee_id') or None)
          if not name or len(name) > 80:
              return jsonify(error='invalid name'), 400
          if emp is not None and len(emp) > 40:
              return jsonify(error='invalid employee_id'), 400
          ts = datetime.datetime.utcnow().isoformat() + 'Z'
          ip = request.headers.get('X-Forwarded-For', request.remote_addr)
          ua = request.headers.get('User-Agent', '')
          with sqlite3.connect(DB_PATH) as con:
              cur = con.execute('INSERT INTO checkins (name, employee_id, timestamp, ip, user_agent) VALUES (?,?,?,?,?)',
                                (name, emp, ts, ip, ua))
              new_id = cur.lastrowid
              con.commit()
          return jsonify(id=new_id, timestamp=ts)
      
      def require_admin(req):
          tok = req.headers.get('X-Admin-Token') or req.args.get('admin_token')
          return tok == ADMIN_TOKEN
      
      @app.get('/attendees')
      def attendees():
          if not require_admin(request):
              return jsonify(error='unauthorized'), 401
          limit = int(request.args.get('limit', 100))
          with sqlite3.connect(DB_PATH) as con:
              con.row_factory = sqlite3.Row
              rows = con.execute('SELECT * FROM checkins ORDER BY id DESC LIMIT ?', (limit,)).fetchall()
          items = [dict(r) for r in rows]
          return jsonify(items=items, count=len(items))
      
      @app.get('/export.csv')
      def export_csv():
          if not require_admin(request):
              return jsonify(error='unauthorized'), 401
          output = io.StringIO()
          writer = csv.writer(output)
          writer.writerow(['id','name','employee_id','timestamp','ip','user_agent'])
          with sqlite3.connect(DB_PATH) as con:
              for r in con.execute('SELECT id,name,employee_id,timestamp,ip,user_agent FROM checkins ORDER BY id'):
                  writer.writerow(r)
          return Response(output.getvalue(), mimetype='text/csv',
                          headers={'Content-Disposition':'attachment; filename=attendance.csv'})
      
      if __name__ == '__main__':
          app.run(host='0.0.0.0', port=5000)

  - path: /etc/systemd/system/attendance.service
    permissions: '0644'
    content: |
      [Unit]
      Description=Attendance Flask (Gunicorn)
      After=network.target
      
      [Service]
      User=ec2-user
      WorkingDirectory=/opt/app
      ExecStart=/usr/local/bin/gunicorn -b 127.0.0.1:5000 app:app --workers 2 --threads 2 --timeout 30
      Restart=always
      Environment=ADMIN_TOKEN=changeme
      
      [Install]
      WantedBy=multi-user.target

  - path: /etc/nginx/conf.d/attendance.conf
    permissions: '0644'
    content: |
      server {
          listen 80 default_server;
          server_name _;
      
          root /opt/attn/web;
          index index.html;
      
          location = /admin { return 301 /admin.html; }
          location /style.css { alias /opt/attn/web/style.css; }
      
          location /api/ {
              proxy_pass http://127.0.0.1:5000/;
              proxy_set_header Host $host;
              proxy_set_header X-Real-IP $remote_addr;
              proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
              proxy_set_header X-Forwarded-Proto $scheme;
          }
      }

runcmd:
  - [ bash, -lc, "id -u ec2-user || useradd -m ec2-user" ]
  - [ bash, -lc, "python3 -m pip install --upgrade pip || true" ]
  - [ bash, -lc, "python3 -m pip install gunicorn flask" ]
  - [ bash, -lc, "mkdir -p /opt/attn/web /opt/app && chown -R ec2-user:ec2-user /opt/attn /opt/app" ]
  - [ bash, -lc, "rm -f /etc/nginx/conf.d/default.conf || true" ]
  - [ bash, -lc, "systemctl daemon-reload" ]
  - [ bash, -lc, "systemctl enable --now attendance.service" ]
  - [ bash, -lc, "nginx -t && systemctl enable --now nginx && systemctl reload nginx" ]
  - [ bash, -lc, "curl -sf http://127.0.0.1:5000/health >/dev/null || (journalctl -u attendance --no-pager | tail -n 120)" ]
